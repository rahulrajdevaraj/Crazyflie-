#!/usr/bin/env python
# This example shows how to control many copter using one (or many) Crazyradio dongles
# It is a slight modification from the ramp.py example

import time, sys
from threading import Thread

#FIXME: Has to be launched from within the example folder
sys.path.append("../lib")
import cflib
from cflib.crazyflie import Crazyflie
#from imu import IMU

#imu = IMU()
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
#rollPID=PID(0.9, 0.2, 0.3) # Kp, Kd, Ki
#pitchPID=PID(0.9, 0.2, 0.3)
#yawPID=PID(0.06, 0.02, 0.01)

class Main:

   
    def __init__(self, uri):
        self.crazyflie = Crazyflie()
        self.uri = uri
        cflib.crtp.init_drivers()
 	
        # You may need to update this value if your Crazyradio uses a different frequency.
        self.crazyflie.open_link(uri)
  	
        # Set up the callback when connected
        self.crazyflie.connected.add_callback(self.connectSetupFinished)
 
    def connectSetupFinished(self, linkURI):
        # Start a separate thread to do the motor test.
        # Do not hijack the calling thread!
        Thread(target=self.pulse_command).start()
 
   


    def pulse_command(self):
        thrust_mult = 1
        thrust_step = 1000
        thrust = 50000
        pitch = 0
        roll = 0
        yawrate = 0
	#roll_m, pitch_m, yaw_m = imu.read_fusedEuler(0)
	self.crazyflie.commander.send_setpoint(roll, pitch, yawrate, thrust)
	#self.crazyflie.param.set_value("flightmode.althold","True")
	t=0
	while t<50:
		self.is_connected = True
		#self.crazyflie.param.set_value("flightmode.althold","True")
		self.crazyflie.commander.send_setpoint(roll, pitch, yawrate, thrust)
		#print t
		if (t%2)==1:
			#print t/2
			thrust = 44000
			#pitch=-1
			#roll=1

		else:
			thrust = 41000
			#pitch=1
			#roll =-1
		#self.crazyflie.receive_packet(-1)
		#pk = CRTPPacket()
		#data = get_data_t()
		time.sleep(0.1)
		t=t+1
	while t<65:
		self.is_connected = True
		self.crazyflie.commander.send_setpoint(roll, pitch, yawrate, thrust)
		thrust = thrust-thrust_step
		t=t+1
		time.sleep(0.1)
	self.crazyflie.commander.send_setpoint(0, 0, 0, 0)	
	time.sleep(0.1)
        self.crazyflie.close_link()

# Starting connection to both two copter. If a link using the same dongle
# is created, the communication will be shared with existing link
# Current implementation (as of Crazyradio 0.52) will divide the available
# bandwidth by 3 if used in that way so go easy on the log messages ;-)
# Future Crazyradio firmware will make that a bit more efficient
#Main("radio://1/10/250K")
#time.sleep(0.5)
Main("radio://0/10/2M")
#time.sleep(0.1)
#Main("radio://0/23/2M")
